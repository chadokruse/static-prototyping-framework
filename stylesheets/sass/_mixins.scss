// Utility Mixins ======================================================== //

// Clearfix
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// Legacy support for inline-block in IE7 (maybe IE6)
@mixin inline-block {
  display: -moz-inline-box;
  -moz-box-orient: vertical;
  display: inline-block;
  vertical-align: baseline;
  zoom: 1;
  *display: inline;
  *vertical-align: auto;
}

// Opacity, extend to IE
@mixin opacity ($value) {
  opacity: $value;
  -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=($value * 100))"; // IE8
  filter: alpha(opacity=($value * 100)); // IE5-7
  zoom: 1; // hacks IE requirement that element be positioned
}

// Hide from screenreaders and browsers
@mixin hidden {
  display: none !important;
  visibility: hidden;
}

// Hide only visually, but have it available for screenreaders
@mixin visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// User select
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}

// Resizeable
@mixin resizable($direction) {
  // Options: horizontal, vertical, both
  resize: $direction;
  overflow: auto; // Safari fix
}


// CSS3 Mixins =========================================================== //
// (Combination of Bourbon by thoughtbot and Bootstrap mixins) =========== //

// Animation ============================================ //

@mixin animation ($animation-1,
  $animation-2: false, $animation-3: false,
  $animation-4: false, $animation-5: false,
  $animation-6: false, $animation-7: false,
  $animation-8: false, $animation-9: false)
  {
    $full: compact($animation-1, $animation-2, $animation-3, $animation-4,
                   $animation-5, $animation-6, $animation-7, $animation-8, $animation-9);

  -webkit-animation: $full;
     -moz-animation: $full;
          animation: $full;
}

@mixin animation-name ($name-1,
  $name-2: false, $name-3: false,
  $name-4: false, $name-5: false,
  $name-6: false, $name-7: false,
  $name-8: false, $name-9: false)
  {
    $full:  compact($name-1, $name-2, $name-3, $name-4,
                    $name-5, $name-6, $name-7, $name-8, $name-9);

  -webkit-animation-name: $full;
     -moz-animation-name: $full;
          animation-name: $full;
}

@mixin animation-duration ($time-1,
  $time-2: false, $time-3: false,
  $time-4: false, $time-5: false,
  $time-6: false, $time-7: false,
  $time-8: false, $time-9: false)
  {
    $full:  compact($time-1, $time-2, $time-3, $time-4,
                    $time-5, $time-6, $time-7, $time-8, $time-9);

  -webkit-animation-duration: $full;
     -moz-animation-duration: $full;
          animation-duration: $full;
}

@mixin animation-timing-function ($motion-1,
//  ease | linear | ease-in | ease-out | ease-in-out
  $motion-2: false, $motion-3: false,
  $motion-4: false, $motion-5: false,
  $motion-6: false, $motion-7: false,
  $motion-8: false, $motion-9: false)
  {
    $full:  compact($motion-1, $motion-2, $motion-3, $motion-4,
                    $motion-5, $motion-6, $motion-7, $motion-8, $motion-9);

  -webkit-animation-timing-function: $full;
     -moz-animation-timing-function: $full;
          animation-timing-function: $full;
}

@mixin animation-iteration-count ($value-1,
//  infinite | <number>
  $value-2: false, $value-3: false,
  $value-4: false, $value-5: false,
  $value-6: false, $value-7: false,
  $value-8: false, $value-9: false)
  {
    $full:  compact($value-1, $value-2, $value-3, $value-4,
                    $value-5, $value-6, $value-7, $value-8, $value-9);

  -webkit-animation-iteration-count: $full;
     -moz-animation-iteration-count: $full;
          animation-iteration-count: $full;
}

@mixin animation-direction ($direction-1,
//  normal | alternate
  $direction-2: false, $direction-3: false,
  $direction-4: false, $direction-5: false,
  $direction-6: false, $direction-7: false,
  $direction-8: false, $direction-9: false)
  {
    $full:  compact($direction-1, $direction-2, $direction-3, $direction-4,
                    $direction-5, $direction-6, $direction-7, $direction-8, $direction-9);

  -webkit-animation-direction: $full;
     -moz-animation-direction: $full;
          animation-direction: $full;
}

@mixin animation-play-state ($state-1,
//  running | paused
  $state-2: false, $state-3: false,
  $state-4: false, $state-5: false,
  $state-6: false, $state-7: false,
  $state-8: false, $state-9: false)
  {
    $full:  compact($state-1, $state-2, $state-3, $state-4,
                    $state-5, $state-6, $state-7, $state-8, $state-9);

  -webkit-animation-play-state: $full;
     -moz-animation-play-state: $full;
          animation-play-state: $full;
}

@mixin animation-delay ($time-1,
  $time-2: false, $time-3: false,
  $time-4: false, $time-5: false,
  $time-6: false, $time-7: false,
  $time-8: false, $time-9: false)
  {
    $full:  compact($time-1, $time-2, $time-3, $time-4,
                    $time-5, $time-6, $time-7, $time-8, $time-9);

  -webkit-animation-delay: $full;
     -moz-animation-delay: $full;
          animation-delay: $full;
}

@mixin animation-fill-mode ($mode-1,
  $mode-2: false, $mode-3: false,
  $mode-4: false, $mode-5: false,
  $mode-6: false, $mode-7: false,
  $mode-8: false, $mode-9: false)
  {
    $full:  compact($mode-1, $mode-2, $mode-3, $mode-4,
                    $mode-5, $mode-6, $mode-7, $mode-8, $mode-9);

  -webkit-animation-fill-mode: $full;
     -moz-animation-fill-mode: $full;
          animation-fill-mode: $full;
}


// Appearance ============================================ //

@mixin appearance ($value) {
  -webkit-appearance: $value;
     -moz-appearance: $value;
      -ms-appearance: $value;
       -o-appearance: $value;
          appearance: $value;
}


// Background Image ============================================ //

@function linear-gradient($pos, $G1: false, $G2: false,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false) {

  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
     $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
    $pos: top; // Default position
  }

  $type: linear;
  $gradient: compact($pos, $G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);
  $type-gradient: append($type, $gradient, comma);

  @return $type-gradient;
}

@function radial-gradient($pos, $shape-size,
                       $G1,        $G2,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false) {

  $type: radial;
  $gradient: compact($pos, $shape-size, $G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);
  $type-gradient: append($type, $gradient, comma);

  @return $type-gradient;
}

@mixin background-image(
  $image-1       , $image-2: false,
  $image-3: false, $image-4: false,
  $image-5: false, $image-6: false,
  $image-7: false, $image-8: false,
  $image-9: false, $image-10: false
) {
  $images: compact($image-1, $image-2,
           $image-3, $image-4,
           $image-5, $image-6,
           $image-7, $image-8,
           $image-9, $image-10);

  background-image: add-prefix($images, webkit);
  background-image: add-prefix($images, moz);
  background-image: add-prefix($images, ms);
  background-image: add-prefix($images, o);
  background-image: add-prefix($images);
}


@function add-prefix($images, $vendor: false) {
  $images-prefixed: ();

  @for $i from 1 through length($images) {
    $type: type-of(nth($images, $i)); // Get type of variable - List or String

    // If variable is a list - Gradient
    @if $type == list {
      $gradient-type: nth(nth($images, $i), 1); // Get type of gradient (linear || radial)
      $gradient-args: nth(nth($images, $i), 2); // Get actual gradient (red, blue)

      $gradient: render-gradients($gradient-args, $gradient-type, $vendor);
      $images-prefixed: append($images-prefixed, $gradient, comma);
    }

    // If variable is a string - Image
    @else if $type == string {
      $images-prefixed: join($images-prefixed, nth($images, $i), comma);
    }
  }
  @return $images-prefixed;
}


@function render-gradients($gradients, $gradient-type, $vendor: false) {
  $vendor-gradients: false;
  @if $vendor {
    $vendor-gradients: -#{$vendor}-#{$gradient-type}-gradient($gradients);
  }

  @else if $vendor == false {
    $vendor-gradients: "#{$gradient-type}-gradient(#{$gradients})";
    $vendor-gradients: unquote($vendor-gradients);
  }
  @return $vendor-gradients;
}


// Background Size ============================================ //

@mixin background-size ($length-1,
  $length-2: false, $length-3: false,
  $length-4: false, $length-5: false,
  $length-6: false, $length-7: false,
  $length-8: false, $length-9: false)
  {
    $full: compact($length-1, $length-2, $length-3, $length-4,
                   $length-5, $length-6, $length-7, $length-8, $length-9);

  -webkit-background-size: $full;
     -moz-background-size: $full;
      -ms-background-size: $full;
       -o-background-size: $full;
          background-size: $full;
}


// Border Image ============================================ //

@mixin border-image ($image) {
  -webkit-border-image: $image;
     -moz-border-image: $image;
      -ms-border-image: $image;
       -o-border-image: $image;
          border-image: $image;
}


// Border Radius ============================================ //

@mixin border-radius ($radii) {
  -webkit-border-radius: $radii;
     -moz-border-radius: $radii;
      -ms-border-radius: $radii;
       -o-border-radius: $radii;
          border-radius: $radii;
}

@mixin border-top-left-radius($radii) {
  -webkit-border-top-left-radius: $radii;
     -moz-border-top-left-radius: $radii;
      -ms-border-top-left-radius: $radii;
       -o-border-top-left-radius: $radii;
          border-top-left-radius: $radii;
}

@mixin border-top-right-radius($radii) {
  -webkit-border-top-right-radius: $radii;
     -moz-border-top-right-radius: $radii;
      -ms-border-top-right-radius: $radii;
       -o-border-top-right-radius: $radii;
          border-top-right-radius: $radii;
}

@mixin border-bottom-left-radius($radii) {
  -webkit-border-bottom-left-radius: $radii;
     -moz-border-bottom-left-radius: $radii;
      -ms-border-bottom-left-radius: $radii;
       -o-border-bottom-left-radius: $radii;
          border-bottom-left-radius: $radii;
}

@mixin border-bottom-right-radius($radii) {
  -webkit-border-bottom-right-radius: $radii;
     -moz-border-bottom-right-radius: $radii;
      -ms-border-bottom-right-radius: $radii;
       -o-border-bottom-right-radius: $radii;
          border-bottom-right-radius: $radii;
}


// Box Shadow ============================================ //

@mixin box-shadow ($shadow-1,
  $shadow-2: false, $shadow-3: false,
  $shadow-4: false, $shadow-5: false,
  $shadow-6: false, $shadow-7: false,
  $shadow-8: false, $shadow-9: false)
  {
    $full: compact($shadow-1, $shadow-2, $shadow-3, $shadow-4,
                   $shadow-5, $shadow-6, $shadow-7, $shadow-8, $shadow-9);

  -webkit-box-shadow: $full;
     -moz-box-shadow: $full;
      -ms-box-shadow: $full;
       -o-box-shadow: $full;
          box-shadow: $full;
}


// Box Sizing ============================================ //

@mixin box-sizing ($box) {
//  content-box | border-box | inherit
  -webkit-box-sizing: $box;
     -moz-box-sizing: $box;
      -ms-box-sizing: $box;
       -o-box-sizing: $box;
          box-sizing: $box;
}


// Columns ============================================ //

@mixin columns($arg) {
// <column-count> || <column-width>
  -webkit-columns: $arg;
     -moz-columns: $arg;
          columns: $arg;
}

@mixin column-count($int) {
// auto || integer
  -webkit-column-count: $int;
     -moz-column-count: $int;
          column-count: $int;
}

@mixin column-gap($length) {
// normal || length
  -webkit-column-gap: $length;
     -moz-column-gap: $length;
          column-gap: $length;
}

@mixin column-fill($arg) {
// auto || length
  -webkit-columns-fill: $arg;
     -moz-columns-fill: $arg;
          columns-fill: $arg;
}

@mixin column-rule($arg) {
// <border-width> || <border-style> || <color>
  -webkit-column-rule: $arg;
     -moz-column-rule: $arg;
          column-rule: $arg;
}

@mixin column-rule-color($color) {
  -webkit-column-rule-color: $color;
     -moz-column-rule-color: $color;
          column-rule-color: $color;
}

@mixin column-rule-style($style) {
// none | hidden | dashed | dotted | double | groove | inset | inset | outset | ridge | solid
  -webkit-column-rule-style: $style;
     -moz-column-rule-style: $style;
          column-rule-style: $style;
}

@mixin column-rule-width ($width) {
  -webkit-column-rule-width: $width;
     -moz-column-rule-width: $width;
          column-rule-width: $width;
}

@mixin column-span($arg) {
// none || all
  -webkit-column-span: $arg;
     -moz-column-span: $arg;
          column-span: $arg;
}

@mixin column-width($length) {
// auto || length
  -webkit-column-width: $length;
     -moz-column-width: $length;
          column-width: $length;
}


// Flex Box ============================================ //

@mixin box($orient, $pack, $align) {
  @include display-box;
  @include box-orient($orient);
  @include box-pack($pack);
  @include box-align($align);
}

@mixin display-box {
  display: -webkit-box;
  display: -moz-box;
  display: box;
}

@mixin box-orient($orient) {
// horizontal|vertical|inline-axis|block-axis|inherit
  -webkit-box-orient: $orient;
     -moz-box-orient: $orient;
          box-orient: $orient;
}

@mixin box-pack($pack) {
// start|end|center|justify
  -webkit-box-pack: $pack;
     -moz-box-pack: $pack;
          box-pack: $pack;
}

@mixin box-align($align) {
// start|end|center|baseline|stretch
  -webkit-box-align: $align;
     -moz-box-align: $align;
          box-align: $align;
}

@mixin box-direction($direction) {
// normal|reverse|inherit
  -webkit-box-direction: $direction;
     -moz-box-direction: $direction;
          box-direction: $direction;
}
@mixin box-lines($lines) {
// single|multiple
  -webkit-box-lines: $lines;
     -moz-box-lines: $lines;
          box-lines: $lines;
}

@mixin box-ordinal-group($integer) {
  -webkit-box-ordinal-group: $integer;
     -moz-box-ordinal-group: $integer;
          box-ordinal-group: $integer;
}

@mixin box-flex($value) {
  -webkit-box-flex: $value;
     -moz-box-flex: $value;
          box-flex: $value;
}

@mixin box-flex-group($integer) {
  -webkit-box-flex-group: $integer;
     -moz-box-flex-group: $integer;
          box-flex-group: $integer;
}


// Linear Gradient ============================================ //

@mixin linear-gradient($pos, $G1, $G2: false,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false,
                       $fallback: false) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
     $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
    $pos: top; // Default position
  }

  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);

  // Set $G1 as the default fallback color
  $fallback-color: nth($G1, 1);

  // If $fallback is a color use that color as the fallback color
  @if type-of($fallback) == color {
    $fallback-color: $fallback;
  }

  background-color: $fallback-color;
  background-image: deprecated-webkit-gradient(linear, $full); // Safari <= 5.0
  background-image:  -webkit-linear-gradient($pos, $full); // Safari 5.1+, Chrome
  background-image:     -moz-linear-gradient($pos, $full);
  background-image:      -ms-linear-gradient($pos, $full);
  background-image:       -o-linear-gradient($pos, $full);
  background-image: unquote("linear-gradient(#{$pos}, #{$full})");
}


// Usage: Gradient position is optional, default is top. Position can be a degree. Color stops are optional as well.
// @include linear-gradient(#1e5799, #2989d8);
// @include linear-gradient(#1e5799, #2989d8, $fallback:#2989d8);
// @include linear-gradient(top, #1e5799 0%, #2989d8 50%);
// @include linear-gradient(50deg, rgba(10, 10, 10, 0.5) 0%, #2989d8 50%, #207cca 51%, #7db9e8 100%);


// Radial Gradient ============================================ //

@mixin radial-gradient($pos, $shape-size,
                       $G1,        $G2,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false) {

  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);

  background-color:  nth($G1, 1);
  background-image:          deprecated-webkit-gradient(radial, $full); // Safari <= 5.0
  background-image:  -webkit-radial-gradient($pos, $shape-size, $full);
  background-image:     -moz-radial-gradient($pos, $shape-size, $full);
  background-image:      -ms-radial-gradient($pos, $shape-size, $full);
  background-image:       -o-radial-gradient($pos, $shape-size, $full);
  background-image: unquote("radial-gradient(#{$pos}, #{$shape-size}, #{$full})");
}

//  Usage: Gradient position and shape-size are required. Color stops are optional.
//  @include radial-gradient(50% 50%, circle cover, #1e5799, #efefef);
//  @include radial-gradient(50% 50%, circle cover, #eee 10%, #1e5799 30%, #efefef);


// Transform ============================================ //

@mixin transform($property) {
//  none | <transform-function>
  -webkit-transform: $property;
     -moz-transform: $property;
      -ms-transform: $property;
       -o-transform: $property;
          transform: $property;
}

@mixin transform-origin($axes) {
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
  -webkit-transform-origin: $axes;
     -moz-transform-origin: $axes;
      -ms-transform-origin: $axes;
       -o-transform-origin: $axes;
          transform-origin: $axes;
}


// Transition ============================================ //

@mixin transition ($property, $duration, $timing-function, $delay) {

  // Detect # of args passed into each variable
  $length-of-property:        length($property);
  $length-of-duration:        length($duration);
  $length-of-timing-function: length($timing-function);
  $length-of-delay:           length($delay);

  @if $length-of-property > 1 {
    @include transition-property(zip($property)); }
  @else {
    @include transition-property(    $property);
  }

  @if $length-of-duration > 1 {
    @include transition-duration(zip($duration)); }
  @else {
    @include transition-duration(    $duration);
  }

  @if $length-of-timing-function > 1 {
    @include transition-timing-function(zip($timing-function)); }
  @else {
    @include transition-timing-function(    $timing-function);
  }

  @if $length-of-delay > 1 {
    @include transition-delay(zip($delay)); }
  @else {
    @include transition-delay(    $delay);
  }
}

@mixin transition-property ($prop-1,
  $prop-2: false, $prop-3: false,
  $prop-4: false, $prop-5: false,
  $prop-6: false, $prop-7: false,
  $prop-8: false, $prop-9: false)
  {
    $full: compact($prop-1, $prop-2, $prop-3, $prop-4, $prop-5,
                   $prop-6, $prop-7, $prop-8, $prop-9);

  -webkit-transition-property: $full;
     -moz-transition-property: $full;
      -ms-transition-property: $full;
       -o-transition-property: $full;
          transition-property: $full;
}

@mixin transition-duration ($time-1,
  $time-2: false, $time-3: false,
  $time-4: false, $time-5: false,
  $time-6: false, $time-7: false,
  $time-8: false, $time-9: false)
  {
    $full: compact($time-1, $time-2, $time-3, $time-4, $time-5,
                   $time-6, $time-7, $time-8, $time-9);

  -webkit-transition-duration: $full;
     -moz-transition-duration: $full;
      -ms-transition-duration: $full;
       -o-transition-duration: $full;
          transition-duration: $full;
}

@mixin transition-timing-function ($motion-1,
  $motion-2: false, $motion-3: false,
  $motion-4: false, $motion-5: false,
  $motion-6: false, $motion-7: false,
  $motion-8: false, $motion-9: false)
  {
    $full: compact($motion-1, $motion-2, $motion-3, $motion-4, $motion-5,
                   $motion-6, $motion-7, $motion-8, $motion-9);

// ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
  -webkit-transition-timing-function: $full;
     -moz-transition-timing-function: $full;
      -ms-transition-timing-function: $full;
       -o-transition-timing-function: $full;
          transition-timing-function: $full;
}

@mixin transition-delay ($time-1,
  $time-2: false, $time-3: false,
  $time-4: false, $time-5: false,
  $time-6: false, $time-7: false,
  $time-8: false, $time-9: false)
  {
    $full: compact($time-1, $time-2, $time-3, $time-4, $time-5,
                   $time-6, $time-7, $time-8, $time-9);

  -webkit-transition-delay: $full;
     -moz-transition-delay: $full;
      -ms-transition-delay: $full;
       -o-transition-delay: $full;
          transition-delay: $full;
}
